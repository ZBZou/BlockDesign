#ifdef B3_USE_ROBOTSIM_GUI
#include "b3RobotSimulatorClientAPI.h"
#else
#include "b3RobotSimulatorClientAPI_NoGUI.h"
#endif
#include <chrono>
using namespace std::chrono;

#include "../Utils/b3Clock.h"

#include <iostream>
#include <fstream>
#include <string.h>
#include <sstream>
#include <stdio.h>
#include <ctime>
#include <assert.h>
#define ASSERT_EQ(a, b) assert((a) == (b));
#include "MinitaurSetup.h"
#include <random>


#include "../CommonInterfaces/CommonExampleInterface.h"
#include "../CommonInterfaces/CommonGUIHelperInterface.h"
#include "BulletCollision/CollisionDispatch/btCollisionObject.h"
#include "BulletCollision/CollisionShapes/btCollisionShape.h"
#include "BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h"

#include "btBulletDynamicsCommon.h"

#include "LinearMath/btVector3.h"
#include "LinearMath/btAlignedObjectArray.h"
#include "../CommonInterfaces/CommonRigidBodyBase.h"
#include "LinearMath/btTransform.h"
#include "LinearMath/btHashMap.h"
using namespace std;
//planar 2D
#include "BulletCollision/CollisionShapes/btBox2dShape.h"
#include "BulletCollision/CollisionDispatch/btEmptyCollisionAlgorithm.h"
#include "BulletCollision/CollisionDispatch/btBox2dBox2dCollisionAlgorithm.h"
#include "BulletCollision/CollisionDispatch/btConvex2dConvex2dAlgorithm.h"

#include "BulletCollision/CollisionShapes/btBox2dShape.h"
#include "BulletCollision/CollisionShapes/btConvex2dShape.h"
#include "BulletCollision/NarrowPhaseCollision/btMinkowskiPenetrationDepthSolver.h"
#define _USE_MATH_DEFINES

#include <cmath>

template <typename T> int sgn(T val) {
    return (T(0) < val) - (val < T(0));
}

int main(int argc, char* argv[])
{
	unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::default_random_engine generator (seed);
	srand(time(0));

	auto start_run = high_resolution_clock::now();
#ifdef B3_USE_ROBOTSIM_GUI
	b3RobotSimulatorClientAPI* sim = new b3RobotSimulatorClientAPI();
	bool isConnected = sim->connect(eCONNECT_GUI);
#else
	b3RobotSimulatorClientAPI_NoGUI* sim = new b3RobotSimulatorClientAPI_NoGUI();
	bool isConnected = sim->connect(eCONNECT_DIRECT);
#endif
	if (!isConnected)
	{
		printf("Cannot connect\n");
		return -1;
	}
	//Can also use eCONNECT_DIRECT,eCONNECT_SHARED_MEMORY,eCONNECT_UDP,eCONNECT_TCP, for example:
	//sim->connect(eCONNECT_UDP, "localhost", 1234);
	sim->configureDebugVisualizer(COV_ENABLE_GUI, 0);
	//	sim->configureDebugVisualizer( COV_ENABLE_SHADOWS, 0);//COV_ENABLE_WIREFRAME
	sim->setTimeOut(10);
	//syncBodies is only needed when connecting to an existing physics server that has already some bodies
	sim->syncBodies();
	btScalar fixedTimeStep = 1. / 240.;

	sim->setTimeStep(fixedTimeStep);

	btQuaternion q = sim->getQuaternionFromEuler(btVector3(0.1, 0.2, 0.3));
	btVector3 rpy;
	rpy = sim->getEulerFromQuaternion(q);


	sim->setGravity(btVector3(0, 0, -10));


	//int blockId = sim->loadURDF("cube.urdf");
	//b3BodyInfo bodyInfo;
	//sim->getBodyInfo(blockId,&bodyInfo);

	int plane = sim->loadURDF("./blockDesign/plane100.urdf");
	int ang = 90;
	// MinitaurSetup minitaur;
	// int minitaurUid = minitaur.setupMinitaur(sim, btVector3(0, 0, .3));

	std::normal_distribution<double> pos_distribution(0.0, 0.1);
	std::normal_distribution<double> orn_distribution(5*M_PI/180, 12.5*M_PI/180);


mylabel2:
// // ################### 3D block ###################
//
// 	stringstream file5;
//
//   file5 << "./blockDesign/peg_3d_2.urdf";
//   string block_file3 = file5.str();
//
//   stringstream file6;
//
//   file6 << "./blockDesign/socket_3d2.urdf";
//   string base_file3 = file6.str();
//
//   b3RobotSimulatorLoadUrdfFileArgs base_args9;
//
//   base_args9.m_startPosition.setValue(1.5,0,0.0);
//   base_args9.m_startOrientation.setEulerZYX(M_PI, 0, 0);
//
//   int base_underwater2 = sim->loadURDF(base_file3,base_args9);
//
//   b3RobotSimulatorLoadUrdfFileArgs block_arg2;
//
//   block_arg2.m_startPosition.setValue(0,0.6,0.13);
//   block_arg2.m_startOrientation.setEulerZYX(0.1,0,0);
//
//
//   int *block = new int;
//   *block = sim->loadURDF(block_file3,block_arg2);
//
//   int *block2 = new int;
//   int *block3 = new int;



// ################2D block ###############
  // stringstream file1;
  // 
  // file1 << "./blockDesign/peg_1.urdf";
	// string block_file = file1.str();
  // 
  // stringstream file3;
  // 
  // file3 << "./blockDesign/peg_2.urdf";
  // string block_file2 = file3.str();
  // 
	// stringstream file5;
  // 
  // file5 << "./blockDesign/peg_3.urdf";
  // string block_file3 = file5.str();
  // 
  // stringstream file2;
  // 
  // file2 << "./blockDesign/socket_1.urdf";
	// string base_file = file2.str();
  // 
  // stringstream file4;
  // 
  // file4 << "./blockDesign/socket_2.urdf";
  // string base_file2 = file4.str();
  // 
  // stringstream file6;
  // 
  // file6 << "./blockDesign/socket_3.urdf";
  // string base_file3 = file6.str();

  stringstream file;
  file << "./blockDesign/block_design.urdf";
  string block_file = file.str();
  
  
  //
	// b3RobotSimulatorLoadUrdfFileArgs base_args1;
	// base_args1.m_startPosition.setValue(0,1.0,0.0);
	// base_args1.m_startOrientation.setEulerZYX(0, 0, 1*M_PI/4);
  //
	// int base1 = sim->loadURDF(base_file,base_args1);
  //
	// b3RobotSimulatorLoadUrdfFileArgs base_args2;
	// base_args2.m_startPosition.setValue(0.1284,1.0,0.0);
	// base_args2.m_startOrientation.setEulerZYX(0, 0, 1*M_PI/4);
  //
	// int base2 = sim->loadURDF(base_file,base_args2);
  //
	// b3RobotSimulatorLoadUrdfFileArgs base_args3;
	// base_args3.m_startPosition.setValue(0.2568,1.0,0.0);
	// base_args3.m_startOrientation.setEulerZYX(0, 0, 1*M_PI/4);
  //
	// int base3 = sim->loadURDF(base_file,base_args3);
  //
	// b3RobotSimulatorLoadUrdfFileArgs base_args4;
	// base_args4.m_startPosition.setValue(0.3852,1.0,0.0);
	// base_args4.m_startOrientation.setEulerZYX(0, 0, 1*M_PI/4);
  //
	// int base4 = sim->loadURDF(base_file,base_args4);
  //
	// b3RobotSimulatorLoadUrdfFileArgs base_args5;
	// base_args5.m_startPosition.setValue(-0.1284,1.0,0.0);
	// base_args5.m_startOrientation.setEulerZYX(0, 0, 1*M_PI/4);
  //
	// int base5 = sim->loadURDF(base_file,base_args5);
  //
	// b3RobotSimulatorLoadUrdfFileArgs base_args6;
	// base_args6.m_startPosition.setValue(-0.2568,1.0,0.0);
	// base_args6.m_startOrientation.setEulerZYX(0, 0, 1*M_PI/4);
  //
	// int base6 = sim->loadURDF(base_file,base_args6);
  //
	// b3RobotSimulatorLoadUrdfFileArgs base_args7;
	// base_args7.m_startPosition.setValue(-0.3852,1.0,0.0);
	// base_args7.m_startOrientation.setEulerZYX(0, 0, 1*M_PI/4);
  //
	// int base7 = sim->loadURDF(base_file,base_args7);
	// 
	// 
	// 
	// 
	// HERE Loading URDF

  // b3RobotSimulatorLoadUrdfFileArgs base_args1;
  // base_args1.m_startPosition.setValue(-1.25,0,0.0);
  // base_args1.m_startOrientation.setEulerZYX(0, 0, 0);
  // //
  // int base_underwater3 = sim->loadURDF(base_file2,base_args1);
  // 
  // //
  // b3RobotSimulatorLoadUrdfFileArgs base_args9;
  // base_args9.m_startPosition.setValue(0,0,0.0);
  // base_args9.m_startOrientation.setEulerZYX(0, 0, 0);
  // // base_args9.m_startPosition.setValue(1.5,0,0.0);
  // // base_args9.m_startOrientation.setEulerZYX(M_PI, 0, 0);
  // 
  // int base_underwater2 = sim->loadURDF(base_file3,base_args9);
  // 
  // b3RobotSimulatorLoadUrdfFileArgs base_args8;
  // base_args8.m_startPosition.setValue(1.25,0,0.0);
  // base_args8.m_startOrientation.setEulerZYX(0, 0, 0);
  // 
  // int base_underwater = sim->loadURDF(base_file,base_args8);

  b3RobotSimulatorLoadUrdfFileArgs block_arg1;
  block_arg1.m_startPosition.setValue(0,0,0);
  block_arg1.m_startOrientation.setEulerZYX(0,0,0);
  
  int *block = new int;
  *block = sim->loadURDF(block_file, block_arg1);


  // b3RobotSimulatorLoadUrdfFileArgs block_arg1;
  // block_arg1.m_startPosition.setValue(0.9,0.8,0.01);
  // block_arg1.m_startOrientation.setEulerZYX(0.34,0,0);
  // 
  // 
  // int *block2 = new int;
  // *block2 = sim->loadURDF(block_file,block_arg1);
  // 
  // b3RobotSimulatorLoadUrdfFileArgs block_arg2;
  // block_arg2.m_startPosition.setValue(-0.35,0.8,0.01);
  // block_arg2.m_startOrientation.setEulerZYX(0.32,0,0);

  // block_arg2.m_startPosition.setValue(0,0.6,0.13);
  // block_arg2.m_startOrientation.setEulerZYX(0.1,0,0);
  //
  // block_arg2.m_startPosition.setValue(-0.05,0.6,0.01);
  // block_arg2.m_startOrientation.setEulerZYX(0.2,0,0);

  // int *block = new int;
  // *block = sim->loadURDF(block_file3,block_arg2);
  // 
  // b3RobotSimulatorLoadUrdfFileArgs block_arg3;
  // block_arg3.m_startPosition.setValue(-1.6,0.8,0.01);
  // block_arg3.m_startOrientation.setEulerZYX(0.34,0,0);
  // 
  // 
  // int *block3 = new int;
  // *block3 = sim->loadURDF(block_file2,block_arg3);








	btVector3 basePos{0, 0, 30};

	// sim->resetDebugVisualizerCamera(3, -89,20, basePos);
  sim->resetDebugVisualizerCamera(3, -89, 0, basePos);

	// b3RobotSimulatorLoadUrdfFileArgs args1;
	// args1.m_startPosition.setValue(1,-0.5,2);
	// // args.m_startOrientation.setEulerZYX(0, 0, 0.707);
	// // args.m_useMultiBody = true;
	// int ball1 = sim->loadURDF("ball_0.1.urdf",args1);
	//
	// b3RobotSimulatorLoadUrdfFileArgs args7;
	// args7.m_startPosition.setValue(1,0,12);
	// // args.m_startOrientation.setEulerZYX(0, 0, 0.707);
	// // args.m_useMultiBody = true;
	// int ball2 = sim->loadURDF("ball_1.urdf",args7);
	//
	// int set[100];
	//
	// for (int i = 0; i < 100; i++)
	// {
	int offset_sign = 1;
	int n = 13;
	int k = 1;
	int suc = 0;
	int loop = 1;
	float m = -30;
	float offset_x = 0.0642+-3*0.1284;

	btQuaternion orn;
	btQuaternion quat;

	const btScalar RADIANS_PER_DEGREE = M_PI / btScalar(180.0);

	btTransform tr;
	tr.setIdentity();


	int count2 = 0;


	mylabel:
	count2 ++;
	start_run = high_resolution_clock::now();
	double pos_noise = pos_distribution(generator);
	double orn_noise = orn_distribution(generator);
	orn.setEulerZYX(0, 0, 0);

	int sign_orn = sgn((rand()%101 - 50));

	quat.setEulerZYX(m*RADIANS_PER_DEGREE, 0, 0);
	// cout<<m*RADIANS_PER_DEGREE+orn_noise*sign_orn<<endl;
	// orn*=quat;
	// b3RobotSimulatorLoadUrdfFileArgs block_arg;
	// block_arg.m_startPosition.setValue(0,0,0.01);
	// block_arg.m_startOrientation = orn;
  //
  //
	// int *block = new int;
	// *block = sim->loadURDF(block_file,block_arg);

  // b3RobotSimulatorLoadUrdfFileArgs block_arg2;
  // block_arg2.m_startPosition.setValue(0,0,0.01);
  // block_arg2.m_startOrientation = orn;
  //
  //
  // int *block = new int;
  // *block = sim->loadURDF(block_file2,block_arg2);

  // b3RobotSimulatorChangeDynamicsArgs D_args;
  // D_args.m_linearDamping = 1;
  // D_args.m_angularDamping = 1;
  // sim->changeDynamics(*block, *block, D_args);
	// offset_x += offset_sign*0.1284;


	// quat.setEulerZYX(0, -m*M_PI/36, 0);
	// orn*=quat;
	// int *cube2 = new int;
	// block_arg.m_startOrientation = orn;
	// *cube2 = sim->loadURDF("triangle.urdf",block_arg);

	// m+=10;
	// cout<<m<<endl;
	// tr.setRotation(quat);
	// sim->setCenterOfMassTransform(tr);
	// set[i] = cube;
	// }


	// b3RobotSimulatorLoadUrdfFileArgs args2;
 	// args2.m_startPosition.setValue(3,0,1);
	// // args.m_startOrientation.setEulerZYX(0, 0, 0.707);
	// // args.m_useMultiBody = true;
	// int block = sim->loadURDF("block.urdf",args2);

	// b3RobotSimulatorLoadUrdfFileArgs args2;
	// args2.m_startPosition.setValue(0,0,0);
	// args2.m_startOrientation.setEulerZYX(0, 0, 1.57);
	//
	// int floor = sim->loadURDF("floor.urdf",args2);

	// b3RobotSimulatorLoadUrdfFileArgs args3;
	// args3.m_startPosition.setValue(0,-1,0.5);
	// args3.m_startOrientation.setEulerZYX(0, 0, 0.707);
	//
	// int funnel1 = sim->loadURDF("funnel.urdf",args3);

	// sim->getBasePositionAndOrientation(funnel2, basePos, baseOrn);
	// sim->resetDebugVisualizerCamera(2, 0,90, basePos);


	// b3RobotSimulatorLoadUrdfFileArgs args6;
	// args4.m_startPosition.setValue(1,0,0.5);
	// args4.m_startOrientation.setEulerZYX(0, 0.707, 0);
	//
	// int funnel4 = sim->loadURDF("funnel.urdf",args6);



	//b3RobotSimulatorLoadFileResults sdfResults;
	//if (!sim->loadSDF("two_cubes.sdf",sdfResults))
	//{
	//		b3Warning("Can't load SDF!\n");
	//}


	// btCollisionShape* groundShape = new btBoxShape(btVector3(btScalar(150.), btScalar(50.), btScalar(150.)));
	// //	btCollisionShape* groundShape = new btStaticPlaneShape(btVector3(0,1,0),50);
	//
	// m_collisionShapes.push_back(groundShape);
	//
	// btTransform groundTransform;
	// groundTransform.setIdentity();
	// groundTransform.setOrigin(btVector3(0, -43, 0));
	//
	// //We can also use DemoApplication::localCreateRigidBody, but for clarity it is provided here:
	// {
	// 	btScalar mass(0.);
	//
	// 	//rigidbody is dynamic if and only if mass is non zero, otherwise static
	// 	bool isDynamic = (mass != 0.f);
	//
	// 	btVector3 localInertia(0, 0, 0);
	// 	if (isDynamic)
	// 		groundShape->calculateLocalInertia(mass, localInertia);
	//
	// 	//using motionstate is recommended, it provides interpolation capabilities, and only synchronizes 'active' objects
	// 	btDefaultMotionState* myMotionState = new btDefaultMotionState(groundTransform);
	// 	btRigidBody::btRigidBodyConstructionInfo rbInfo(mass, myMotionState, groundShape, localInertia);
	// 	btRigidBody* body = new btRigidBody(rbInfo);
	//
	// 	//add the body to the dynamics world
	//   m_dynamicsWorld->addRigidBody(body);
	// }

	b3Clock clock;
	double startTime = clock.getTimeInSeconds();
	double simWallClockSeconds = 20.;
#if 0
	while (clock.getTimeInSeconds()-startTime < simWallClockSeconds)
	{
		sim->stepSimulation();
	}
#endif
	sim->setRealTimeSimulation(false);
	int vidLogId = -1;
	int ballLogId = -1;
	int rotateCamera = 0;


	stringstream filename1;
	filename1 << "data.dat";
	string file_data = filename1.str();

	stringstream filename2;
	filename2 << "pos.dat";
	string file_pos = filename2.str();

	stringstream filename3;
	filename3 << "orn.dat";
	string file_orn = filename3.str();

	stringstream filename4;
	filename4 << "vel.dat";
	string file_vel = filename4.str();

  stringstream filename5;
  filename5 << "time.dat";
  string file_time = filename5.str();

	ofstream myfile1 (file_data, ios_base::app);
	ofstream myfile2 (file_pos, ios_base::app);
	ofstream myfile3 (file_orn, ios_base::app);
	ofstream myfile4 (file_vel, ios_base::app);
  ofstream myfile5 (file_time, ios_base::app);

	if (k != 1)
	{
		myfile1 <<"\n";
		myfile2 <<"\n";
		myfile3 <<"\n";
		myfile4 <<"\n";
    myfile5 <<"\n";
	}



	int count = 0;
	float x;
	float y;
	float z;

	float frame_x;
	float frame_y;
	float frame_z;

	btVector3 basePos_ori;
	btQuaternion baseOrn_ori;
	sim->getBasePositionAndOrientation(*block, basePos_ori, baseOrn_ori);

	btVector3 baseLinearVelocity;
	btVector3 baseAngularVelocity;

	const b3RobotSimulatorClientAPI_NoGUI* sim1 = sim;

	sim1->getBaseVelocity(*block, baseLinearVelocity, baseAngularVelocity);



	btVector3 rpy1;
	rpy1 = sim->getEulerFromQuaternion(baseOrn_ori);




	x = basePos_ori.x();
	y = basePos_ori.y();
	z = basePos_ori.z();
	frame_x = basePos_ori.x();
	frame_y = basePos_ori.y();
	frame_z = basePos_ori.z();
	printf("Pos[%d] = [%f,%f,%f], Orn[%d] = [%f,%f,%f]\n", k, basePos_ori.x(), basePos_ori.y(), basePos_ori.z(), k, baseOrn_ori.x()
	,baseOrn_ori.y(), baseOrn_ori.z());

	printf("LinearVelocity[%d] = [%f,%f,%f], AngularVelocity[%d] = [%f,%f,%f]\n", k, baseLinearVelocity[0], baseLinearVelocity[1], baseLinearVelocity[2], k, baseAngularVelocity[0]
	,baseAngularVelocity[1], baseAngularVelocity[2]);

  myfile1 <<"Position = [" <<basePos_ori.x() <<", " <<basePos_ori.y() << ", "<<basePos_ori.z() <<"], ";
  myfile1 <<"Orientation = [" <<baseOrn_ori.x() <<", " <<baseOrn_ori.y() << ", "<<baseOrn_ori.z() <<", "<< baseOrn_ori.w()<<"]. "<<endl;
  myfile1 <<"LinearVelocity = [" <<baseLinearVelocity[0] <<", " <<baseLinearVelocity[1] << ", "<<baseLinearVelocity[2] <<"], ";
  myfile1 <<"AngularVelocity = [" <<baseAngularVelocity[0] <<", " <<baseAngularVelocity[1] << ", "<<baseAngularVelocity[2] <<"]. "<<endl;
  myfile2 <<basePos_ori.x() <<", " <<basePos_ori.y() << ", "<<basePos_ori.z() <<endl;
  myfile3 <<baseOrn_ori.x() <<", " <<baseOrn_ori.y() << ", "<<baseOrn_ori.z() <<", "<<baseOrn_ori.w()<<endl;
  myfile4 <<baseLinearVelocity[0] <<", " <<baseLinearVelocity[1] << ", "<<baseLinearVelocity[2]<<endl;
  myfile5 <<0.0 <<endl;

	std::clock_t t_start;
  std::clock_t t_start_cons;
	double span;
  double t_record;
	t_start = std::clock();
  t_start_cons = std::clock();

  // if (vidLogId < 0)
  // {
  //   vidLogId = sim->startStateLogging(STATE_LOGGING_VIDEO_MP4, "video.mp4");
  // }
  // else
  // {
  //   sim->stopStateLogging(vidLogId);
  //   vidLogId = -1;
  // }
  //
  // b3RobotSimulatorGetCameraImageArgs ca1{640, 640};
  // b3CameraImageData ca2;

  double volume;
  double d_water;

  volume = 5.746E-05;
  d_water = 1200;

  btVector3 Pos;
  btQuaternion Orn;
  btVector3 Fb = btVector3(0, 0, 0);
  btVector3 C_Fb = btVector3(0, 0, -0.5);

	while (sim->canSubmitCommand())
	{



    sim ->applyExternalForce(*block, -1, Fb, C_Fb, 1);
    // sim ->applyExternalForce(*block2, -1, Fb, C_Fb, 1);
    // sim ->applyExternalForce(*block3, -1, Fb, C_Fb, 1);

    cout<<volume*d_water*9.8<<endl;





		sim->stepSimulation();
    // sim->getCameraImage(640, 640, ca1, ca2);

		// b3RobotSimulatorGetContactPointsArgs* cp1 = new b3RobotSimulatorGetContactPointsArgs();
		// b3ContactInformation* cif;
		//
		// cp1->m_bodyUniqueIdA = *block;
		// cp1->m_bodyUniqueIdB = receiver;
		//
		// sim->getContactPoints(*cp1, cif);
		// cout<<cif<<endl;

	// 	btVector3 LinearVelocity;
	// 	btVector3 AngularVelocity;
  //   btScalar orn_z;
  //   btScalar orn_y;
  //   btScalar orn_x;
  //
  //
	// 	const b3RobotSimulatorClientAPI_NoGUI* sim2 = sim;
  //
	// 	sim2->getBaseVelocity(*block, LinearVelocity, AngularVelocity);
  //
	// 	sim->getBasePositionAndOrientation(*block, Pos, Orn);
  //   Orn.getEulerZYX(orn_z, orn_y, orn_x);
  //
  //   float v = 0;
  //
  //
  //   v = (pow(LinearVelocity[0], 2.0)+pow(LinearVelocity[1], 2.0)+pow(LinearVelocity[2], 2.0));
  //   // cout<<orn_x<<endl;
  //   // cout<<orn_y<<endl;
  //   // cout<<orn_z<<endl;
  //   // AngularVelocity[2] -= orn_z/4;
  //
  //
  //   // sim2->resetBaseVelocity(*block, LinearVelocity, AngularVelocity);
  //   // btVector3 force1 = btVector3(sin(orn_y)*0.0001/(5*v+1), -cos(orn_y)*0.0001/(5*v+1), 0);
  //   // btVector3 position1 = btVector3(0, -0.6, 0);
  //   //
  //   // btVector3 force2 = btVector3(-sin(orn_y)*0.0001/(5*v+1), cos(orn_y)*0.0001/(5*v+1), 0);
  //   // btVector3 position2 = btVector3(0, 0.6, 0);
  //   //
  //   // btVector3 force3 = btVector3(sin(orn_y)*0.005/(5*v+1), -cos(orn_y)*0.005/(5*v+1),0);
  //   // btVector3 position3 = btVector3(0, 0.0, 0);
  //   //
  //   //
  //   //
  //   //
  //   //
  //   // if (count > 300){
  //   //   sim ->applyExternalForce(*block, -1, force1, position1, 1);
  //   //
  //   //   sim ->applyExternalForce(*block, -1, force2, position2, 1);
  //   //
  //   //   sim ->applyExternalForce(*block, -1, force3, position3, 1);
  //   // }
  //
  //
  //
  //
	// 	// stringstream filename1;
	// 	// filename1 << "data-" << ang << ".dat";
	// 	// string file_data = filename1.str();
  //   //
	// 	// stringstream filename2;
	// 	// filename2 << "pos-" << ang << ".dat";
	// 	// string file_pos = filename2.str();
  //   //
	// 	// stringstream filename3;
	// 	// filename3 << "orn-" << ang << ".dat";
	// 	// string file_orn = filename3.str();
  //   //
	// 	// stringstream filename4;
	// 	// filename4 << "vel-" << ang << ".dat";
	// 	// string file_vel = filename4.str();
  //   //
  //   // stringstream filename5;
  //   // filename5 << "time-" << ang << ".dat";
  //   // string file_time = filename5.str();
  //
  //
  //
	// 	span = ( std::clock() - t_start ) / (double) CLOCKS_PER_SEC;
  //   t_record = (std::clock() - t_start_cons) / (double) CLOCKS_PER_SEC;
	// 	// if (abs(Pos.x() - x) >= 0.01 || abs(Pos.y() - y) >= 0.01 || abs(Pos.z() - z) >= 0.01)
	// 	if (span >= 0.005)
	// 	{
  //     sim2->getBaseVelocity(*block, LinearVelocity, AngularVelocity);
  //
  //     sim->getBasePositionAndOrientation(*block, Pos, Orn);
  //
	// 		printf("Pos[%d] = [%f,%f,%f], Orn[%d] = [%f,%f,%f]\n", k, Pos.x(), Pos.y(), Pos.z(), k, Orn.x()
	// 		,Orn.y(), Orn.z());
  //
	// 		printf("LinearVelocity[%d] = [%f,%f,%f], AngularVelocity[%d] = [%f,%f,%f]\n", k, LinearVelocity[0], LinearVelocity[1], LinearVelocity[2], k, AngularVelocity[0]
	// 		,AngularVelocity[1], AngularVelocity[2]);
  //
  //     // std::cout <<t_record << '\n';
  //
  //
	// 		if (myfile1.is_open())
	// 		{
	// 			myfile1 <<"Position = [" <<Pos.x() <<", " <<Pos.y() << ", "<<Pos.z() <<"], ";
	// 			myfile1 <<"Orientation = [" <<Orn.x() <<", " <<Orn.y() << ", "<<Orn.z() <<", "<< baseOrn_ori.w()<<"]. "<<endl;
	// 			myfile1 <<"LinearVelocity = [" <<LinearVelocity[0] <<", " <<LinearVelocity[1] << ", "<<LinearVelocity[2] <<"], ";
	// 			myfile1 <<"AngularVelocity = [" <<AngularVelocity[0] <<", " <<AngularVelocity[1] << ", "<<AngularVelocity[2] <<"]. "<<endl;
	// 			myfile2 <<Pos.x() <<", " <<Pos.y() << ", "<<Pos.z() <<endl;
	// 			myfile3 <<Orn.x() <<", " <<Orn.y() << ", "<<Orn.z() <<", "<<Orn.w()<<endl;
	// 			myfile4 <<LinearVelocity[0] <<", " <<LinearVelocity[1] << ", "<<LinearVelocity[2]<<endl;
  //       myfile5 <<t_record <<endl;
  //
  //
	// 			x = Pos.x();
	// 			y = Pos.y();
	// 			z = Pos.z();
	// 		}
  //
	// 		else cout << "Unable to open file";
  //
	// 		t_start = std::clock();
	// 	}
  // mylabel3:
  //
	// 	if (count > 400 && abs(Pos.x() - frame_x) <= 0.0001 && abs(Pos.y() - frame_y) <= 0.0001 && abs(Pos.z() - frame_z) <= 0.0001)
	// 	{
  //
  //
	// 		std::clock_t start;
	//     double duration;
	// 		double duration2;
	// 		start = std::clock();
	// 		duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
	// 		while (duration < 2)
	// 		{
	// 			// sim->stepSimulation();
  //       sim2->getBaseVelocity(*block, LinearVelocity, AngularVelocity);
  //
  //       sim->getBasePositionAndOrientation(*block, Pos, Orn);
  //
  //
  //
  //
  //       v = (pow(LinearVelocity[0], 2.0)+pow(LinearVelocity[1], 2.0)+pow(LinearVelocity[2], 2.0));
  //
  //
  //       sim2->resetBaseVelocity(*block, LinearVelocity, AngularVelocity);
  //       // btVector3 force1 = btVector3(sin(orn_y)*0.0001/(5*v+1), -cos(orn_y)*0.0001/(5*v+1), 0);
  //       // btVector3 position1 = btVector3(0, -0.6, 0);
  //       //
  //       // btVector3 force2 = btVector3(-sin(orn_y)*0.0001/(5*v+1), cos(orn_y)*0.0001/(5*v+1), 0);
  //       // btVector3 position2 = btVector3(0, 0.6, 0);
  //       //
  //       // btVector3 force3 = btVector3(sin(orn_y)*0.005/(5*v+1), -cos(orn_y)*0.005/(5*v+1),0);
  //       // btVector3 position3 = btVector3(0, 0.0, 0);
  //       //
  //       // sim ->applyExternalForce(*block, -1, force1, position1, 1);
  //       //
  //       // sim ->applyExternalForce(*block, -1, force2, position2, 1);
  //       //
  //       // sim ->applyExternalForce(*block, -1, force3, position3, 1);
  //
  //       if (abs(Pos.x() - frame_x) > 0.0001 || abs(Pos.y() - frame_y) > 0.0001 || abs(Pos.z() - frame_z) > 0.0001)
  //         {goto mylabel3;}
  //
	// 			duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
  //       duration2 = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
  //       t_record = (std::clock() - t_start_cons) / (double) CLOCKS_PER_SEC;
  //
	// 			if (duration2 >= 0.005)
	// 			{
  //         cout<<duration<<endl;
  //         printf("Pos[%d] = [%f,%f,%f], Orn[%d] = [%f,%f,%f]\n", k, Pos.x(), Pos.y(), Pos.z(), k, Orn.x()
  //         ,Orn.y(), Orn.z());
  //
  //         printf("LinearVelocity[%d] = [%f,%f,%f], AngularVelocity[%d] = [%f,%f,%f]\n", k, LinearVelocity[0], LinearVelocity[1], LinearVelocity[2], k, AngularVelocity[0]
  //         ,AngularVelocity[1], AngularVelocity[2]);
  //
  //         myfile1 <<"Position = [" <<Pos.x() <<", " <<Pos.y() << ", "<<Pos.z() <<"], ";
  //         myfile1 <<"Orientation = [" <<Orn.x() <<", " <<Orn.y() << ", "<<Orn.z() <<", "<< baseOrn_ori.w()<<"]. "<<endl;
  //         myfile1 <<"LinearVelocity = [" <<LinearVelocity[0] <<", " <<LinearVelocity[1] << ", "<<LinearVelocity[2] <<"], ";
  //         myfile1 <<"AngularVelocity = [" <<AngularVelocity[0] <<", " <<AngularVelocity[1] << ", "<<AngularVelocity[2] <<"]. "<<endl;
  //         myfile2 <<Pos.x() <<", " <<Pos.y() << ", "<<Pos.z() <<endl;
  //         myfile3 <<Orn.x() <<", " <<Orn.y() << ", "<<Orn.z() <<", "<<Orn.w()<<endl;
  //         myfile4 <<LinearVelocity[0] <<", " <<LinearVelocity[1] << ", "<<LinearVelocity[2]<<endl;
  //         myfile5 <<t_record <<endl;
  //
  //
	// 				duration2 = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
  //
	// 			}
  //
	// 		}
  //
  //
	// 		sim->removeBody(*block);
	// 		delete block;
  //
  //
	// 		auto stop_run = high_resolution_clock::now();
	// 		auto duration_run = duration_cast<microseconds>(stop_run - start_run);
	// 		cout << duration_run.count() << endl;
  //
	// 		if (k < n)
	// 			{
	// 				k++;
  //
	// 				if (count2 < loop)
	// 					{
  //             // m+=1;
  //             myfile1.close();
  //             myfile2.close();
  //             myfile3.close();
  //             myfile4.close();
  //             myfile5.close();
	// 						goto mylabel;
	// 					}
	// 					else
	// 					{
	// 						m+=5;
	// 						// loop--;
  //             cout<<m<<endl;
	// 						count2 = 0;
  //
	// 						// offset_sign*=-1;
	// 						// offset_x += offset_sign*3*0.0642;
  //             myfile1.close();
  //             myfile2.close();
  //             myfile3.close();
  //             myfile4.close();
  //             myfile5.close();
	// 						goto mylabel;
	// 					}
	// 			}
	// 		else {
  //
	// 			if (ang < 90)
	// 			{
  //         myfile1 <<"\n";
	// 				myfile2 <<"\n";
	// 				myfile3 <<"\n";
	// 				myfile4 <<"\n";
  //         myfile5 <<"\n";
  //         myfile1.close();
	// 				myfile2.close();
	// 				myfile3.close();
	// 				myfile4.close();
  //         myfile5.close();
  //
	// 				ang += 2;
	// 				goto mylabel2;
  //
	// 			}
	// 			else
	// 			{
  //         myfile1 <<"\n";
	// 				myfile2 <<"\n";
	// 				myfile3 <<"\n";
	// 				myfile4 <<"\n";
  //         myfile5 <<"time:"<<(std::clock() - t_start_cons) / (double) CLOCKS_PER_SEC<<"\n";
  //         myfile1.close();
	// 				myfile2.close();
	// 				myfile3.close();
	// 				myfile4.close();
  //         myfile5.close();
	// 				printf("sim->disconnect\n");
  //
	// 				sim->disconnect();
  //
	// 				printf("delete sim\n");
	// 				delete sim;
  //
	// 				printf("exit\n");
	// 			}
	// 		 }
  //


	// }


		b3KeyboardEventsData keyEvents;
		sim->getKeyboardEvents(&keyEvents);
		if (keyEvents.m_numKeyboardEvents)
		{
			//printf("num key events = %d]\n", keyEvents.m_numKeyboardEvents);
			//m_keyState is a flag combination of eButtonIsDown,eButtonTriggered, eButtonReleased
			for (int i = 0; i < keyEvents.m_numKeyboardEvents; i++)
			{
				b3KeyboardEvent& e = keyEvents.m_keyboardEvents[i];

				if (e.m_keyCode == '0')
				{
					if (e.m_keyState & eButtonTriggered)
					{
						if (vidLogId < 0)
						{
							vidLogId = sim->startStateLogging(STATE_LOGGING_VIDEO_MP4, "video.mp4");
						}
						else
						{
							sim->stopStateLogging(vidLogId);
							vidLogId = -1;
						}
					}
				}

				if (e.m_keyCode == 'm')
				{
					if (ballLogId < 0 && e.m_keyState & eButtonTriggered)
					{
						ballLogId = sim->startStateLogging(STATE_LOGGING_MINITAUR, "simlog.bin");
					}
					if (ballLogId >= 0 && e.m_keyState & eButtonReleased)
					{
						sim->stopStateLogging(ballLogId);
						ballLogId = -1;
					}
				}

				if (e.m_keyCode == 'r' && e.m_keyState & eButtonTriggered)
				{
					rotateCamera = 1 - rotateCamera;
				}

				if (e.m_keyCode == 'a'&& e.m_keyState & eButtonTriggered )
				{
					b3RobotSimulatorLoadUrdfFileArgs args;

					args.m_startPosition.setValue(1+pos_noise,0.5+pos_noise,3);
					args.m_startOrientation.setEulerZYX(orn_noise, orn_noise, orn_noise);

					int small_ball = sim->loadURDF("ball_0.1.urdf",args);


					btVector3 Pos;
					btQuaternion Orn;
					sim->getBasePositionAndOrientation(small_ball, Pos, Orn);


					std::cout << Orn.x() << '\n';
					printf("Pos = [%f,%f,%f], Orn = [%f,%f,%f]\n", Pos.x(), Pos.y(), Pos.z(), Orn.x()
				,Orn.y(), Orn.z());


				}

				if (e.m_keyCode == 's'&& e.m_keyState & eButtonTriggered )
				{
					b3RobotSimulatorLoadUrdfFileArgs args;

					args.m_startPosition.setValue(1+pos_noise,0.5+pos_noise,3);
					args.m_startOrientation.setEulerZYX(orn_noise, orn_noise, orn_noise);
					int small_cube = sim->loadURDF("test_cube.urdf",args);
					btVector3 Pos;
					btQuaternion Orn;
					sim->getBasePositionAndOrientation(small_cube, Pos, Orn);


					std::cout << Orn.x() << '\n';
					printf("Pos = [%f,%f,%f], Orn = [%f,%f,%f]\n", Pos.x(), Pos.y(), Pos.z(), Orn.x()
				,Orn.y(), Orn.z());

				}

				if (e.m_keyCode == 'd'&& e.m_keyState & eButtonTriggered )
				{
		        Fb = btVector3(18,7, 0);
				}

        if (e.m_keyCode == 'z'&& e.m_keyState & eButtonTriggered )
        {
            Fb = btVector3(0,0, 0);
        }

        if (e.m_keyCode == 'x'&& e.m_keyState & eButtonTriggered )
        {
            Fb = btVector3(0,-18, 0);
        }

				//printf("keyEvent[%d].m_keyCode = %d, state = %d\n", i,keyEvents.m_keyboardEvents[i].m_keyCode,keyEvents.m_keyboardEvents[i].m_keyState);
			}
		}



		// b3RobotSimulatorLoadUrdfFileArgs args;
		// double number = distribution(generator);
		// args.m_startPosition.setValue(number,number,3);
		// args.m_startOrientation.setEulerZYX(number, number, number);
		// int small_cube = sim->loadURDF("test_cube.urdf",args);


		if (rotateCamera)
		{
			static double yaw = 0;
			double distance = 1;
			yaw += 0.1;
			btVector3 basePos;
			btQuaternion baseOrn;
			sim->getBasePositionAndOrientation(plane, basePos, baseOrn);
			sim->resetDebugVisualizerCamera(distance, -20, yaw, basePos);
		}
		b3Clock::usleep(1000. * 1000. * fixedTimeStep);

		count += 1;

    frame_x = Pos.x();
    frame_y = Pos.y();
    frame_z = Pos.z();


	}



	printf("sim->disconnect\n");

	sim->disconnect();

	printf("delete sim\n");
	delete sim;

	printf("exit\n");

}
